#!/bin/sh

SENSU_API_URL=${SENSU_API_URL:-"http://sensu-backend:8080"}
SENSU_NAMESPACE=${SENSU_NAMESPACE:-"default"}
SENSU_CLUSTER_CONFIG=${SENSU_CLUSTER_CONFIG:-"config/sensu/cluster"}
SENSU_WORKSHOP_SEEDS=${SENSU_WORKSHOP_SEEDS:-"config/sensu/seeds"}
USERS_JSON=${USERS_JSON:-"users/users.json"}
SENSU_WORKSHOP_ENVRC_TEMPLATE=${SENSU_WORKSHOP_ENVRC_TEMPLATE:-"users/user.envrc.template"}
SENSU_WORKSHOP_PS1_TEMPLATE=${SENSU_WORKSHOP_PS1_TEMPLATE:-"users/user.envrc.ps1.template"}
SENSU_WORKSHOP_USER_ENV_FILES=${SENSU_WORKSHOP_USER_ENV_FILES:-"/users"}
VAULT_ADDR=${VAULT_ADDR:-"http://vault:8200"}
VAULT_DEV_ROOT_TOKEN_ID=${VAULT_DEV_ROOT_TOKEN_ID:-"secretsmanager"}
VAULT_SECRET_PATH_PREFIX=${VAULT_SECRET_PATH_PREFIX:-"secret/sensu"}
VAULT_WORKSHOP_SEEDS=${VAULT_WORKSHOP_SEEDS:-"config/vault/secrets"}
ROCKETCHAT_ADDR=${ROCKETCHAT_ADDR:-"http://rocketchat:5000"}
ROCKETCHAT_ADMIN_USER=${ROCKETCHAT_ADMIN_USER:-"admin"}
ROCKETCHAT_ADMIN_PASSWORD=${ROCKETCHAT_ADMIN_PASSWORD:-"admin"}
ROCKETCHAT_USER_PASSWORD=${WORKSHOP_PASSWORD:-"workshop"}
check_deps() {
  for DEP in sensuctl vault
  do
    command -v ${DEP} > /dev/null 2>&1
    if [ $? -ne 0 ]; then
      echo "Missing required dependency: \"${DEP}\""
      exit 127
    fi
  done
}

validate_io() {
  if [ ! -d ${VAULT_WORKSHOP_SEEDS} ]; then
    echo "Missing or invalid namespace seeding secrets: \"${VAULT_WORKSHOP_SEEDS}\" (must be a directory)"
    exit 2
  fi
  if [ ! -d ${SENSU_WORKSHOP_SEEDS} ]; then
    echo "Missing or invalid namespace seeding resources: \"${SENSU_WORKSHOP_SEEDS}\" (must be a directory)"
    exit 2
  fi
  if [ ! -d ${SENSU_WORKSHOP_USER_ENV_FILES} ]; then
    echo "Missing or invalid env file path: \"${SENSU_WORKSHOP_USER_ENV_FILES}\" (must be a directory)"
    exit 2
  fi
}

validate_api_urls() {
  curl -XGET ${SENSU_API_URL}/health > /dev/null 2>&1
  if [ $? -ne 0 ]; then
    echo "No Sensu API found at ${SENSU_API_URL}"
    exit 2
  fi
  curl -XGET ${VAULT_ADDR}/v1/sys/health > /dev/null 2>&1
  if [ $? -ne 0 ]; then
    echo "No Vault API found at ${VAULT_ADDR}"
    exit 2
  fi
}

seed_cluster() {
  echo "Applying cluster configuration from ${SENSU_CLUSTER_CONFIG}"
  /usr/local/bin/sensuctl create -r -f ${SENSU_CLUSTER_CONFIG}
  if [ $? -ne 0 ]; then
    echo "Error encountered while seeding workshop user namespaces"
    exit 2
  fi
}

seed_namespaces() {
  for NAMESPACE in $(/usr/local/bin/sensuctl namespace list --format json | jq -r .[].name)
  do
    echo "Seeding namespace '${NAMESPACE}' with resource templates in ${SENSU_WORKSHOP_SEEDS}"
    /usr/local/bin/sensuctl create -r -f ${SENSU_WORKSHOP_SEEDS} --namespace ${NAMESPACE}
    if [ $? -ne 0 ]; then
      echo "Error encountered while seeding workshop user namespaces"
      exit 2
    fi
  done
}

seed_chat_users() {
	result=$(curl -s -XPOST ${ROCKETCHAT_ADDR}/api/v1/login -d "user=${ROCKETCHAT_ADMIN_USER}&password=${ROCKETCHAT_ADMIN_PASSWORD}") 
	if [ $? -gt 0 ]; then
  		echo "Failed to auth with rocketchat"
  		echo ""
  		exit 2
	fi
	token=$(echo $result | jq -r .data.authToken)
	id=$(echo $result | jq -r .data.userId)
	echo "Rocket Chat Admin Token: ${token}"
	echo "Rocket Chat Admin Id: ${id}"
	curl -s -H "X-Auth-Token: ${token}" -H "X-User-Id: ${id}" ${ROCKETCHAT_ADDR}/api/v1/me > /dev/null
	if [ $? -gt 0 ]; then
  		echo "rocketchat token/id are invalid"
  		echo ""
  		exit 2
	fi
	result=$(curl -sS -H "X-Auth-Token: ${token}" \
             -H "X-User-Id: ${id}" \
             -H "Content-type:application/json" \
	     ${ROCKETCHAT_ADDR}/api/v1/roles.addUserToRole \
	     -d "{ \"roleName\": \"bot\" , \"username\": \"admin\" }")
 	if [ $(echo $result | jq -r .success) != "true" ]; then
  		echo "rocketchat user admin not added to role bot"
  		echo ""
  		exit 2
	fi
  	for USER in $( cat "${USERS_JSON}" | jq -r '.[] | @base64' | sort -u); do
    		export USERNAME_ORIGINAL=$(echo ${USER} | base64 -d | jq -r .username)
    		export USERNAME=$(echo ${USERNAME_ORIGINAL} | awk -F "@" '{print $1}')
	        result=$(curl -sS -H "X-Auth-Token: ${token}" \
                     -H "X-User-Id: ${id}" \
                     -H "Content-type:application/json" \
                     ${ROCKETCHAT_ADDR}/api/v1/users.create \
		     -d "{\"name\": \"${USERNAME}\", \"email\": \"${USERNAME_ORIGINAL}\", \"password\": \"${ROCKETCHAT_USER_PASSWORD}\", \"username\": \"${USERNAME}\"}")
		if [ $? -gt 0 ]; then
  			echo "rocketchat user not created for $USERNAME"
  			echo ""
  			exit 2
		fi
	        result=$(curl -sS -H "X-Auth-Token: ${token}" \
                     -H "X-User-Id: ${id}" \
                     -H "Content-type:application/json" \
		     ${ROCKETCHAT_ADDR}/api/v1/users.getStatus?username=${USERNAME})
		if [ $(echo $result | jq -r .success) != "true" ]; then
  			echo "rocketchat user not created for $USERNAME"
  			echo ""
  			exit 2
		fi
	        result=$(curl -sS -H "X-Auth-Token: ${token}" \
                     -H "X-User-Id: ${id}" \
                     -H "Content-type:application/json" \
		     ${ROCKETCHAT_ADDR}/api/v1/roles.addUserToRole \
		     -d "{ \"roleName\": \"bot\" , \"username\": \"${USERNAME}\" }")
		if [ $(echo $result | jq -r .success) != "true" ]; then
  			echo "rocketchat user $USERNAME not added to role bot"
  			echo ""
  			exit 2
		fi
	done
}

seed_user_envrc_files() {
  for USER in $( cat "${USERS_JSON}" | jq -r '.[] | @base64' | sort -u); do
    export USERNAME_ORIGINAL=$(echo ${USER} | base64 -d | jq -r .username)
    export USERNAME=$(echo ${USERNAME_ORIGINAL} | awk -F "@" '{print $1}')
    export PASSWORD=$(echo ${USER} | base64 -d | jq -r .password)
    if [ -z ${PASSWORD} ]; then
      export PASSWORD=${WORKSHOP_PASSWORD}
    fi
    export USER_API_KEY=$(sensuctl api-key grant ${USERNAME} | awk -F "/" '{print $NF}')
    echo "Generating user .envrc file: ${SENSU_WORKSHOP_USER_ENV_FILES}/${USERNAME}.envrc"
    cat ${SENSU_WORKSHOP_ENVRC_TEMPLATE} | envsubst | tee ${SENSU_WORKSHOP_USER_ENV_FILES}/${USERNAME}.envrc > /dev/null 2>&1
    echo "Generating user .envrc.ps1 file: ${SENSU_WORKSHOP_USER_ENV_FILES}/${USERNAME}.envrc.ps1"
    cat ${SENSU_WORKSHOP_PS1_TEMPLATE} | envsubst | tee ${SENSU_WORKSHOP_USER_ENV_FILES}/${USERNAME}.envrc.ps1 > /dev/null 2>&1
  done
}

seed_secrets() {
  for SECRET in $(ls ${VAULT_WORKSHOP_SEEDS})
  do
    NAME=$(echo $SECRET | cut -d "." -f 1)
    echo "Seeding Vault with secret key: ${VAULT_SECRET_PATH_PREFIX}/${NAME}"
    vault kv put ${VAULT_SECRET_PATH_PREFIX}/${NAME} @${VAULT_WORKSHOP_SEEDS}/${SECRET} > /dev/null 2>&1
    vault kv get --format json ${VAULT_SECRET_PATH_PREFIX}/${NAME} | jq .data.data
  done



  result=$(curl -s -XPOST ${ROCKETCHAT_ADDR}/api/v1/login -d "user=${ROCKETCHAT_ADMIN_USER}&password=${ROCKETCHAT_ADMIN_PASSWORD}") 
  if [ $? -gt 0 ]; then
  	echo "Failed to auth with rocketchat"
  	echo ""
  	exit 2
  fi
  rc_token=$(echo $result | jq -r .data.authToken)
  rc_id=$(echo $result | jq -r .data.userId)
  rc_user=${ROCKETCHAT_ADMIN_USER}
  rc_password=${ROCKETCHAT_ADMIN_PASSWORD}
  rc_channel="#general"
  rc_url="http://rocketchat:5000"
  echo "Seeding Vault with secret key: ${VAULT_SECRET_PATH_PREFIX}/rocketchat"
  vault kv put ${VAULT_SECRET_PATH_PREFIX}/rocketchat url=${rc_url} token=${rc_token} id=${rc_id} user=${rc_user} password=${rc_password} channel=${rc_channel} > /dev/null 2>&1
  vault kv get --format json ${VAULT_SECRET_PATH_PREFIX}/rocketchat | jq .data.data

	
}

echo "Seeding Sensu Go Workshop resources..."
wait-for-sensuctl
if [ $? -gt 0 ]; then
  echo "Failed to create Sensu user accounts."
  echo ""
  exit 2
fi


check_deps && \
validate_io && \
validate_api_urls && \
seed_cluster && \
seed_namespaces && \
seed_user_envrc_files && \
seed_chat_users && \
seed_secrets
if [ $? -gt 0 ]; then
  echo "Failed to create Sensu user accounts."
  echo ""
  exit 2
fi
echo ""
exit 0
