#!/bin/sh 
# 
# Generate Sensu user RBAC profiles, including (by default) a dedicated 
# Namespace will full CRUD access (via a Role + RoleBinding), limited 
# ClusterRoleBinding (with access to create but not list or read API keys), 
# and read-only access to the default namespace (to view the instructors 
# environment). To customize these defaults, modify user.yaml.template 
# or provide a custom user template. 
# 
# The script accepts four positional arguments: 
# 1. A "users.json" file containing a list of usernames and password_hash values
# 2. A user RBAC profile template in YAML or JSON format
# 3. An output directory where the user RBAC profiles will be generated 
# 4. The output format, which should match template used in argument #2
# 
# The default arguments are documented below. Execute the script with 
# explicit arguments as follows: 
# 
# $ generate_user_rbac users/users.json users/user.yaml.template config/sensu/rbac yaml
# 
# NOTE: no flags are supported, so the arguments must be provided in the 
# correct order. 

USERS_JSON=${1:-"users/users.json"} 
USER_TEMPLATE=${2:-"users/user.yaml.template"}
OUTPUT_DIRECTORY=${3:-"config/sensu/rbac"}
OUTPUT_FORMAT=${4:-"yaml"}

check_deps() {
  for DEP in jq base64 envsubst
  do
    command -v ${DEP} > /dev/null 2>&1
    if [ $? -ne 0 ]; then
      echo "Missing required dependency: \"${DEP}\""
      exit 127
    fi
  done
}

validate_json() {
  cat ${USERS_JSON} | jq . > /dev/null 2>&1
  if [ $? -ne 0 ]; then 
    echo "Invalid users JSON file: \"${USERS_JSON}\""
    exit 2
  fi
}

validate_io() {
  if [ ! -f ${USERS_JSON} ]; then
    echo "Missing user JSON file: \"${USERS_JSON}\""
    exit 2
  fi
  if [ ! -f ${USER_TEMPLATE} ]; then
    echo "Missing user template file: \"${USER_TEMPLATE}\""
    exit 2
  fi
  if [ ! -d ${OUTPUT_DIRECTORY} ]; then
    echo "Missing output directory: \"${OUTPUT_DIRECTORY}\""
    exit 2
  fi
}

create_users() {
  for USER in $( cat "${USERS_JSON}" | jq -r '.[] | @base64'); do
    export USERNAME_ORIGINAL=$(echo ${USER} | base64 -d | jq -r .username)
    export USERNAME=$(echo ${USERNAME_ORIGINAL} | awk -F "@" '{print $1}')
    export PASSWORD=$(echo ${USER} | base64 -d | jq -r .password)
    export PASSWORD_HASH=$(echo ${USER} | base64 -d | jq -r .password_hash)
    if [ ${PASSWORD_HASH} == "null" ]; then
      PASSWORD_HASH=$(sensuctl user hash-password ${PASSWORD})
    fi
    if [ ! -f ${OUTPUT_DIRECTORY}/${USERNAME}.${OUTPUT_FORMAT} ]; then
      echo "Generating user template: ${OUTPUT_DIRECTORY}/${USERNAME}.${OUTPUT_FORMAT}"
      cat ${USER_TEMPLATE} | envsubst | tee ${OUTPUT_DIRECTORY}/${USERNAME}.${OUTPUT_FORMAT} > /dev/null 2>&1
    else
      echo "Skipping user template for \"${USERNAME}\" (an RBAC template at \"${OUTPUT_DIRECTORY}/${USERNAME}.${OUTPUT_FORMAT}\" already exists)"
    fi
  done
}

check_deps
validate_io
validate_json
create_users
