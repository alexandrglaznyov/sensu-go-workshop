---
version: "3.3"
services:
  # Sensu Backend
  #
  # Includes embedded database, API, event processor, and web app.
  #
  # See: https://docs.sensu.io/sensu-go/latest/reference/backend/
  sensu-backend:
    image: sensu/sensu:${SENSU_BACKEND_VERSION}
    labels:
    - io.sensu.role=sensu-backend
    ports:
    - 3000:3000
    - 8080:8080
    - 8081:8081
    environment:
    - SENSU_BACKEND_CLUSTER_ADMIN_USERNAME
    - SENSU_BACKEND_CLUSTER_ADMIN_PASSWORD
    - SENSU_INTERNAL_ENVIRONMENT
    - SENSU_WORKSHOP_ENV_SECRET
    - SENSU_TIMESCALEDB_DSN
    volumes:
    - type: volume
      source: sensu_data
      target: /var/lib/sensu
    healthcheck:
      test: wget -q -O- http://127.0.0.1:8080/health
      interval: 10s
      timeout: 5s
      retries: 6
    command: >-
      sensu-backend start
      --log-level=debug
      --debug=true

  # Sensu Agent
  #
  # Includes monitoring agent, local API, and local StatsD socket.
  #
  # See: https://docs.sensu.io/sensu-go/latest/reference/agent/
  sensu-agent:
    image: sensu/sensu:${SENSU_AGENT_VERSION}
    labels:
    - io.sensu.role=sensu-agent
    ports:
    - ${SENSU_API_PORT}/tcp
    - ${SENSU_STATSD_METRICS_PORT}/udp
    environment:
    - SENSU_BACKEND_URL
    - SENSU_AGENT_PASSWORD
    - SENSU_NAMESPACE
    - SENSU_SUBSCRIPTIONS
    - SENSU_KEEPALIVE_INTERVAL=5
    - SENSU_KEEPALIVE_WARNING_THRESHOLD=10
    - SENSU_KEEPALIVE_CRITICAL_THRESHOLD=20
    - SENSU_API_HOST
    - SENSU_API_PORT
    - SENSU_STATSD_METRICS_HOST
    - SENSU_STATSD_METRICS_PORT
    volumes: []
    healthcheck:
      test: wget -q -O- http://127.0.0.1:3031/healthz
      interval: 10s
      timeout: 5s
      retries: 6
    command: >-
      sensu-agent start
      --log-level=info
      --deregister=true
      --detect-cloud-provider
      --labels="environment=training,workshop_version=${WORKSHOP_SENSU_VERSION}"
      --statsd-event-handlers timescaledb
      --password ${SENSU_AGENT_PASSWORD}

  # Sensu Asset Server
  #
  # Serve Sensu Assets over HTTP using NGINX.
  #
  # See: https://nginx.org/en/docs/
  sensu-assets:
    image: "nginx:latest"
    labels:
    - io.sensu.role=asset-server
    ports:
    - 8000:80
    environment: []
    volumes:
    - type: bind
      source: ./config/nginx/nginx.conf
      target: /etc/nginx/nginx.conf
    - type: volume
      source: asset_data
      target: /usr/share/nginx/html/assets
    - type: volume
      source: user_data
      target: /usr/share/nginx/html/users
    healthcheck:
      test: curl -s -I -A "Docker health check (curl)" http://127.0.0.1:80/
      interval: 10s
      timeout: 5s
      retries: 6

  # Sensu Asset SMB Adapter
  #
  # Upload assets to the workshop Sensu Assets service via SMB.
  #
  # See: https://www.samba.org/samba/docs/
  sensu-assets-smb:
    build:
      context: ./docker/sensu-assets/
      dockerfile: Dockerfile.debian
      args:
      - WORKSHOP_PASSWORD
    image: sensu-assets:latest
    labels:
    - io.sensu.role=asset-server
    ports:
    - 139:139
    - 445:445
    environment: []
    volumes:
    - type: bind
      source: ./config/samba/smb.conf
      target: /etc/samba/smb.conf
    - type: volume
      source: asset_data
      target: /home/sensu/assets
    healthcheck:
      test: smbstatus --brief
      interval: 10s
      timeout: 5s
      retries: 6
    command: smbd --foreground --log-stdout --configfile /etc/samba/smb.conf

  # TimescaleDB
  #
  # Includes TimescaleDB (Postgres database) for storage of telemetry data.
  #
  # See: https://docs.timescale.com/latest/introduction
  timescaledb:
    image: timescale/timescaledb:${TIMESCALEDB_VERSION}
    labels:
    - io.sensu.role=data-platform
    ports:
    - 5432:5432
    environment:
    - POSTGRES_PASSWORD
    - POSTGRES_DB
    volumes:
    - type: volume
      source: timescaledb_data
      target: /var/lib/postgresql/data
    - type: bind
      source: ./config/timescaledb/100-sensu-metrics.sql
      target: /docker-entrypoint-initdb.d/100-sensu-metrics.sql
    healthcheck:
      test: pg_isready -U postgres
      interval: 10s
      timeout: 5s
      retries: 6
    command: >-
      postgres

  # Grafana
  #
  # Includes Grafana dashboard and datasource configuration files for Timescaledb.
  #
  # See: https://grafana.com/docs/grafana/latest/
  grafana:
    image: grafana/grafana:${GRAFANA_VERSION}
    labels:
    - io.sensu.role=dashboards
    ports:
    - 3001:3000
    environment:
    - POSTGRES_PASSWORD
    - GF_AUTH_BASIC_ENABLED
    - GF_SECURITY_ADMIN_USER
    - GF_SECURITY_ADMIN_PASSWORD
    - GF_PATHS_PROVISIONING=/etc/grafana/provisioning
    volumes:
    - type: volume
      source: grafana_data
      target: /var/lib/grafana
    - type: bind
      source: ./config/grafana/provisioning
      target: /etc/grafana/provisioning
    - type: bind
      source: ./config/grafana/dashboards/timescaledb
      target: /etc/grafana/dashboards
    healthcheck:
      test: wget -q -O- http://127.0.0.1:3000/api/health
      interval: 10s
      timeout: 5s
      retries: 6

  # Vault
  #
  # Includes a Vault "devmode" server for secrets management.
  #
  # See: https://www.vaultproject.io/docs
  vault:
    image: vault:${VAULT_VERSION}
    labels:
    - io.sensu.role=secrets-manager
    ports:
    - 8200:8200
    environment:
    - VAULT_DEV_ROOT_TOKEN_ID
    - VAULT_DEV_LISTEN_ADDRESS
    volumes: []
    healthcheck:
      test: wget -q -O- http://127.0.0.1:8200/v1/sys/health
      interval: 10s
      timeout: 5s
      retries: 6
    command: >-
      vault server -dev -log-level debug

  # Workstation
  #
  # Provide a clean workshop environment based on Alpine Linux w/ sensuctl
  # pre-installed in case the trainee workstation is missing a required
  # dependency.
  #
  # See: https://alpinelinux.org
  sensuctl:
    build:
      context: ./
      dockerfile: Dockerfile
      args:
      - SENSU_CLI_VERSION
      - VAULT_VERSION
    image: workshop:${SENSU_CLI_VERSION}
    depends_on:
    - sensu-backend
    deploy:
      restart_policy:
        condition: on-failure
        max_attempts: 3
    labels:
    - io.sensu.role=sensuctl
    ports: []
    environment:
    - SENSU_API_URL
    - SENSU_USERNAME
    - SENSU_PASSWORD
    - SENSU_NAMESPACE
    - VAULT_ADDR
    - VAULT_TOKEN
    working_dir: /root
    volumes:
    - type: bind
      source: /var/run/docker.sock
      target: /var/run/docker.sock
    - type: bind
      source: ./scripts
      target: /usr/local/bin/scripts
    - type: bind
      source: ./
      target: /root/workshop
      consistency: consistent
    - type: volume
      source: sensuctl_data
      target: /root/.config
      consistency: consistent
    entrypoint: wait-for-sensu-backend sensuctl
    command: >-
      configure -n
      --url ${SENSU_API_URL}
      --username ${SENSU_USERNAME}
      --password ${SENSU_PASSWORD}
      --namespace ${SENSU_NAMESPACE}
      --format tabular

  # Configurator
  #
  # Configuration automation for instructor-led workshops (e.g. user profile
  # generation) using a super light-weight "configuration management" stack:
  #
  # - curl
  # - jq
  # - envsubst (part of the gettext package)
  # - sensuctl
  # - docker & docker-compose
  #
  # See: ./scripts/
  configurator:
    build:
      context: ./
      dockerfile: Dockerfile
      args:
      - SENSU_CLI_VERSION
      - VAULT_VERSION
    image: workshop:${SENSU_CLI_VERSION}
    depends_on:
    - sensu-backend
    deploy:
      restart_policy:
        condition: on-failure
        max_attempts: 3
    labels:
    - io.sensu.role=configurator
    ports: []
    environment:
    - SENSU_BACKEND_CLUSTER_ADMIN_USERNAME
    - SENSU_BACKEND_CLUSTER_ADMIN_PASSWORD
    - VAULT_ADDR
    - VAULT_TOKEN
    - WORKSHOP_HOSTNAME
    - WORKSHOP_SENSU_VERSION
    - WORKSHOP_SENSU_BUILD
    - WORKSHOP_PASSWORD
    volumes:
    - type: bind
      source: /var/run/docker.sock
      target: /var/run/docker.sock
    - type: bind
      source: ./.env
      target: /workshop/.env
    - type: bind
      source: ./${COMPOSE_FILE}
      target: /workshop/docker-compose.yaml
    - type: bind
      source: ./docker
      target: /workshop/docker
    - type: bind
      source: ./scripts
      target: /usr/local/bin/scripts
    - type: bind
      source: ./users
      target: /workshop/users
    - type: bind
      source: ./config/sensu
      target: /workshop/config/sensu
      consistency: consistent
    - type: bind
      source: ./config/vault
      target: /workshop/config/vault
      consistency: consistent
    - type: volume
      source: sensuctl_data
      target: /root/.config
    - type: volume
      source: user_data
      target: /users
    command: |-
      init-workshop

volumes:
  sensu_data:
    driver: local
  sensuctl_data:
    driver: local
  etcd_data:
    driver: local
  postgres_data:
    driver: local
  asset_data:
    driver: local
  user_data:
    driver: local
  grafana_data:
    driver: local
  influxdb_data:
    driver: local
  timescaledb_data:
    driver: local
  prometheus_data:
    driver: local
  elasticsearch_data:
    driver: local
