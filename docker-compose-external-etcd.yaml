---
version: "3.3"
services:
  # Etcd
  #
  # Standalone etcd server.  
  # 
  # See: https://etcd.io/docs/v3.4.0/op-guide/container/#running-a-single-node-etcd-1
  etcd:
    image: gcr.io/etcd-development/etcd:${ETCD_VERSION}
    labels:
    - io.sensu.role=sensu-backend-etcd
    healthcheck:
      test: wget -q -O- http://127.0.0.1:2379/health
      interval: 10s
      timeout: 5s
      retries: 6
    ports:
    - 2379:2379
    - 2380:2380
    environment:
    - ETCD_HOST
    volumes:
    - type: volume 
      source: etcd_data
      target: /var/lib/etcd
    command: >-
      /usr/local/bin/etcd 
      --data-dir=/var/lib/etcd
      --name etcd-1 
      --initial-cluster-state "new"
      --initial-advertise-peer-urls "http://${ETCD_HOST}:2380" 
      --listen-peer-urls "http://0.0.0.0:2380" 
      --advertise-client-urls "http://${ETCD_HOST}:2379" 
      --listen-client-urls "http://0.0.0.0:2379" 
      --initial-cluster "etcd-1=http://${ETCD_HOST}:2380"

  # Sensu Backend Cluster
  #
  # Includes embedded database, API, event processor, and web UI). 
  # 
  # See: https://docs.sensu.io/sensu-go/latest/reference/backend/
  sensu-backend:
    # container_name: sensu-backend
    image: sensu/sensu:${SENSU_BACKEND_VERSION}
    depends_on: 
    - etcd
    labels:
    - io.sensu.role=sensu-backend
    healthcheck:
      test: wget -q -O- http://127.0.0.1:8080/health
      interval: 10s
      timeout: 5s
      retries: 6
    environment:
    - SENSU_TIMESCALEDB_DSN
    - PAGERDUTY_TOKEN
    - SENSU_NO_EMBED_ETCD=true
    - SENSU_ETCD_CLIENT_URLS=http://workshop_etcd_1:2379
    - ETCD_CLIENT_URLS=${SENSU_ETCD_CLIENT_URLS}
    volumes:
    - type: volume 
      source: sensu_data
      target: /var/lib/sensu
    command: >-
      sensu-backend start 
      --log-level=debug
      --debug=true
      --no-embed-etcd
      --etcd-client-urls ${SENSU_ETCD_CLIENT_URLS}

  # Sensu Agent 
  #
  # Includes monitoring agent, local API, and local StatsD socket.
  # 
  # See: https://docs.sensu.io/sensu-go/latest/reference/agent/
  sensu-agent:
    # container_name: sensu-agent
    image: sensu/sensu:${SENSU_AGENT_VERSION}
    depends_on:
    - sensu-backend
    labels:
    - io.sensu.role=sensu-agent
    healthcheck:
      test: wget -q -O- http://127.0.0.1:3031/healthz
      interval: 10s
      timeout: 5s
      retries: 6
    environment:
    - SENSU_BACKEND_URL
    - SENSU_NAMESPACE
    - SENSU_SUBSCRIPTIONS
    - SENSU_KEEPALIVE_INTERVAL=5
    - SENSU_KEEPALIVE_WARNING_THRESHOLD=10
    - SENSU_KEEPALIVE_CRITICAL_THRESHOLD=20
    command: >-
      sensu-agent start 
      --log-level=info
      --deregister=true 
      --detect-cloud-provider
      --labels="environment=training,workshop_version=${WORKSHOP_VERSION}"

  # Sensu Backend Load Balancer
  # 
  # Nginx load balancer
  # 
  # See: https://nginx.com 
  sensu-lb:
    container_name: sensu-backend
    image: nginx:${NGINX_VERSION}
    depends_on:
    - sensu-backend
    labels:
    - io.sensu.role=sensu-lb
    ports:
    - 3000:3000
    - 8080:8080
    - 8081:8081
    healthcheck:
      test: curl --fail http://127.0.0.1:8080/health
      interval: 10s
      timeout: 5s
      retries: 6
    volumes:
    - type: bind
      source: ./config/nginx/nginx.lb.conf
      target: /etc/nginx/nginx.conf
    - type: bind 
      source: ./config/nginx/upstream_app.conf
      target: /etc/nginx/upstream_etcd.conf
    - type: bind 
      source: ./config/nginx/upstream_app.conf
      target: /etc/nginx/upstream_app.conf
    - type: bind 
      source: ./config/nginx/upstream_api.conf
      target: /etc/nginx/upstream_api.conf
    - type: bind 
      source: ./config/nginx/upstream_websockets.conf
      target: /etc/nginx/upstream_websockets.conf

  # TimescaleDB  
  #
  # Includes TimescaleDB (Postgres database) for storage of telemetry data.
  # 
  # See: https://docs.timescale.com/latest/introduction
  timescaledb:
    # container_name: timescaledb
    image: timescale/timescaledb:${TIMESCALEDB_VERSION}
    labels:
    - io.sensu.role=tsdb
    ports:
    - 5432:5432
    healthcheck:
      test: pg_isready -U postgres
      interval: 10s
      timeout: 5s
      retries: 6
    environment:
    - POSTGRES_PASSWORD
    - POSTGRES_DB
    volumes: 
    - type: bind 
      source: ./config/timescaledb/100-sensu-metrics.sql
      target: /docker-entrypoint-initdb.d/100-sensu-metrics.sql
    - type: volume 
      source: timescaledb_data
      target: /var/lib/postgresql/data
      
  # Grafana 
  #
  # Includes Grafana dashboard and datasource configuration files for 
  # Timescaledb. 
  # 
  # See: https://grafana.com/docs/grafana/latest/
  grafana:
    # container_name: grafana
    image: grafana/grafana:${GRAFANA_VERSION}
    labels:
    - io.sensu.role=dashboards
    ports:
    - 3001:3000
    healthcheck:
      test: wget -q -O- http://127.0.0.1:3000/api/health
      interval: 10s
      timeout: 5s
      retries: 6
    environment:
    - POSTGRES_PASSWORD
    volumes:
    - type: bind
      source: ./config/grafana/provisioning/datasources/timescaledb.yaml 
      target: /etc/grafana/provisioning/datasources/timescaledb.yaml
    - type: volume 
      source: grafana_data
      target: /var/lib/grafana

  # Configurator
  # 
  # Configuration automation for instructor-led workshops (e.g. user profile 
  # generation) using a super light-weight "configuration management" stack:
  #
  # - curl
  # - jq
  # - envsubst (part of the gettext package)
  # - sensuctl
  # - docker & docker-compose
  # 
  # See: ./scripts/
  configurator:
    # container_name: configurator
    build:
      context: docker/workshop/
      dockerfile: Dockerfile
      args: 
      - SENSU_CLI_VERSION
    image: workshop:${SENSU_CLI_VERSION}
    depends_on:
    - etcd
    labels:
    - io.sensu.role=configurator
    environment:
    - SENSU_BACKEND_CLUSTER_ADMIN_USERNAME
    - SENSU_BACKEND_CLUSTER_ADMIN_PASSWORD
    - SENSU_ETCD_CLIENT_URLS
    volumes:
    - type: bind
      source: /var/run/docker.sock
      target: /var/run/docker.sock
    - type: bind
      source: ./.env
      target: /var/lib/sensu/workshop/.env
    - type: bind
      source: ./${COMPOSE_FILE}
      target: /var/lib/sensu/workshop/docker-compose.yaml
    - type: bind
      source: ./docker
      target: /var/lib/sensu/workshop/docker
    - type: bind 
      source: ./scripts
      target: /usr/local/bin/scripts
    - type: bind
      source: ./users
      target: /var/lib/sensu/workshop/users
    - type: bind
      source: ./config/sensu
      target: /var/lib/sensu/workshop/config/sensu
      consistency: consistent
    - type: volume
      source: sensuctl_data
      target: /root/.config
    command: |-
      generate_user_rbac
  
  # Workstation
  # 
  # Provide a clean workshop environment based on Alpine Linux w/ sensuctl 
  # pre-installed in case the trainee workstation is missing a required 
  # dependency. 
  # 
  # See: https://alpinelinux.org
  sensuctl:
    # container_name: sensuctl
    build:
      context: docker/workshop/
      dockerfile: Dockerfile
      args:
      - SENSU_CLI_VERSION
    image: workshop:${SENSU_CLI_VERSION}
    labels:
    - io.sensu.role=sensuctl
    environment:
    - SENSU_API_URL
    - SENSU_USERNAME
    - SENSU_PASSWORD
    - SENSU_NAMESPACE
    working_dir: /root
    volumes:
    - type: bind
      source: /var/run/docker.sock
      target: /var/run/docker.sock
    - type: bind 
      source: ./scripts
      target: /usr/local/bin/scripts
    - type: bind
      source: ./
      target: /root/workshop
      consistency: consistent 
    - type: volume
      source: sensuctl_data
      target: /root/.config
      consistency: consistent 
    entrypoint: wait-for-sensu-backend sensuctl
    command: >-
      configure -n 
      --url ${SENSU_API_URL}
      --username ${SENSU_USERNAME}
      --password ${SENSU_PASSWORD}
      --namespace ${SENSU_NAMESPACE}
      --format tabular
      
volumes:
  etcd_data:
    driver: local
  sensuctl_data:
    driver: local
  sensu_data:
    driver: local
  timescaledb_data:
    driver: local
  grafana_data:
    driver: local
